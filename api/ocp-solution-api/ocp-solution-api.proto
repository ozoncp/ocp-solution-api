syntax = "proto3";
package ocp.solution.api;

import "api/ocp-verdict-api/ocp-verdict-api.proto";
import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

option go_package = "github.com/ozoncp/ocp-solution-api/pkg/ocp-solution-api;ocp_solution_api";

service OcpSolutionApi {
  rpc CreateSolutionV1(CreateSolutionV1Request) returns (CreateSolutionV1Response) {
    option (google.api.http) = {
      post: "/v1/solutions"
    };
  }

  rpc ListSolutionsV1(ListSolutionsV1Request) returns (ListSolutionsV1Response) {
    option (google.api.http) = {
      get: "/v1/solutions"
    };
  }

  rpc UpdateSolutionVerdictV1(UpdateSolutionVerdictV1Request) returns (UpdateSolutionVerdictV1Response) {
    option (google.api.http) = {
      post: "/v1/solutions/{solution_id}"
    };
  }

  rpc RemoveSolutionV1(RemoveSolutionV1Request) returns (RemoveSolutionV1Response) {
    option (google.api.http) = {
      delete: "/v1/solutions/{solution_id}"
    };
  }
}

message CreateSolutionV1Request {
  uint64 issue_id = 1 [(validate.rules).uint64.gt = 0];
}

message CreateSolutionV1Response {
  Solution solution = 1;
}

message ListSolutionsV1Request {
  uint64 limit = 1;
  uint64 offset = 2;
}

message ListSolutionsV1Response {
  repeated Solution solutions = 1;
}

message UpdateSolutionVerdictV1Request {
  uint64 solution_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 user_id = 2;
  ocp.verdict.api.Verdict.Status status = 3;
  string comment = 4;
}

message UpdateSolutionVerdictV1Response {
  ocp.verdict.api.Verdict verdict = 1;
}

message RemoveSolutionV1Request {
  uint64 solution_id = 1 [(validate.rules).uint64.gt = 0];
}

message RemoveSolutionV1Response {
  bool found = 1;
  bool success = 2;
}

message Solution {
  uint64 solution_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 issue_id = 2 [(validate.rules).uint64.gt = 0];

  ocp.verdict.api.Verdict verdict = 3;
}
