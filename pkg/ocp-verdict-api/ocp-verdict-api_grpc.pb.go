// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_verdict_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpVerdictApiClient is the client API for OcpVerdictApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpVerdictApiClient interface {
	CreateVerdictV1(ctx context.Context, in *CreateVerdictV1Request, opts ...grpc.CallOption) (*CreateVerdictV1Response, error)
	ListVerdictsV1(ctx context.Context, in *ListVerdictsV1Request, opts ...grpc.CallOption) (*ListVerdictsV1Response, error)
	DescribeVerdictV1(ctx context.Context, in *DescribeVerdictV1Request, opts ...grpc.CallOption) (*DescribeVerdictV1Response, error)
	RemoveVerdictV1(ctx context.Context, in *RemoveVerdictV1Request, opts ...grpc.CallOption) (*RemoveVerdictV1Response, error)
}

type ocpVerdictApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpVerdictApiClient(cc grpc.ClientConnInterface) OcpVerdictApiClient {
	return &ocpVerdictApiClient{cc}
}

func (c *ocpVerdictApiClient) CreateVerdictV1(ctx context.Context, in *CreateVerdictV1Request, opts ...grpc.CallOption) (*CreateVerdictV1Response, error) {
	out := new(CreateVerdictV1Response)
	err := c.cc.Invoke(ctx, "/ocp.verdict.api.OcpVerdictApi/CreateVerdictV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVerdictApiClient) ListVerdictsV1(ctx context.Context, in *ListVerdictsV1Request, opts ...grpc.CallOption) (*ListVerdictsV1Response, error) {
	out := new(ListVerdictsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.verdict.api.OcpVerdictApi/ListVerdictsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVerdictApiClient) DescribeVerdictV1(ctx context.Context, in *DescribeVerdictV1Request, opts ...grpc.CallOption) (*DescribeVerdictV1Response, error) {
	out := new(DescribeVerdictV1Response)
	err := c.cc.Invoke(ctx, "/ocp.verdict.api.OcpVerdictApi/DescribeVerdictV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVerdictApiClient) RemoveVerdictV1(ctx context.Context, in *RemoveVerdictV1Request, opts ...grpc.CallOption) (*RemoveVerdictV1Response, error) {
	out := new(RemoveVerdictV1Response)
	err := c.cc.Invoke(ctx, "/ocp.verdict.api.OcpVerdictApi/RemoveVerdictV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpVerdictApiServer is the server API for OcpVerdictApi service.
// All implementations must embed UnimplementedOcpVerdictApiServer
// for forward compatibility
type OcpVerdictApiServer interface {
	CreateVerdictV1(context.Context, *CreateVerdictV1Request) (*CreateVerdictV1Response, error)
	ListVerdictsV1(context.Context, *ListVerdictsV1Request) (*ListVerdictsV1Response, error)
	DescribeVerdictV1(context.Context, *DescribeVerdictV1Request) (*DescribeVerdictV1Response, error)
	RemoveVerdictV1(context.Context, *RemoveVerdictV1Request) (*RemoveVerdictV1Response, error)
	mustEmbedUnimplementedOcpVerdictApiServer()
}

// UnimplementedOcpVerdictApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpVerdictApiServer struct {
}

func (UnimplementedOcpVerdictApiServer) CreateVerdictV1(context.Context, *CreateVerdictV1Request) (*CreateVerdictV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerdictV1 not implemented")
}
func (UnimplementedOcpVerdictApiServer) ListVerdictsV1(context.Context, *ListVerdictsV1Request) (*ListVerdictsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVerdictsV1 not implemented")
}
func (UnimplementedOcpVerdictApiServer) DescribeVerdictV1(context.Context, *DescribeVerdictV1Request) (*DescribeVerdictV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVerdictV1 not implemented")
}
func (UnimplementedOcpVerdictApiServer) RemoveVerdictV1(context.Context, *RemoveVerdictV1Request) (*RemoveVerdictV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVerdictV1 not implemented")
}
func (UnimplementedOcpVerdictApiServer) mustEmbedUnimplementedOcpVerdictApiServer() {}

// UnsafeOcpVerdictApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpVerdictApiServer will
// result in compilation errors.
type UnsafeOcpVerdictApiServer interface {
	mustEmbedUnimplementedOcpVerdictApiServer()
}

func RegisterOcpVerdictApiServer(s grpc.ServiceRegistrar, srv OcpVerdictApiServer) {
	s.RegisterService(&OcpVerdictApi_ServiceDesc, srv)
}

func _OcpVerdictApi_CreateVerdictV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVerdictV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVerdictApiServer).CreateVerdictV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.verdict.api.OcpVerdictApi/CreateVerdictV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVerdictApiServer).CreateVerdictV1(ctx, req.(*CreateVerdictV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVerdictApi_ListVerdictsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVerdictsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVerdictApiServer).ListVerdictsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.verdict.api.OcpVerdictApi/ListVerdictsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVerdictApiServer).ListVerdictsV1(ctx, req.(*ListVerdictsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVerdictApi_DescribeVerdictV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeVerdictV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVerdictApiServer).DescribeVerdictV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.verdict.api.OcpVerdictApi/DescribeVerdictV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVerdictApiServer).DescribeVerdictV1(ctx, req.(*DescribeVerdictV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVerdictApi_RemoveVerdictV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVerdictV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVerdictApiServer).RemoveVerdictV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.verdict.api.OcpVerdictApi/RemoveVerdictV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVerdictApiServer).RemoveVerdictV1(ctx, req.(*RemoveVerdictV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpVerdictApi_ServiceDesc is the grpc.ServiceDesc for OcpVerdictApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpVerdictApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.verdict.api.OcpVerdictApi",
	HandlerType: (*OcpVerdictApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVerdictV1",
			Handler:    _OcpVerdictApi_CreateVerdictV1_Handler,
		},
		{
			MethodName: "ListVerdictsV1",
			Handler:    _OcpVerdictApi_ListVerdictsV1_Handler,
		},
		{
			MethodName: "DescribeVerdictV1",
			Handler:    _OcpVerdictApi_DescribeVerdictV1_Handler,
		},
		{
			MethodName: "RemoveVerdictV1",
			Handler:    _OcpVerdictApi_RemoveVerdictV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-verdict-api/ocp-verdict-api.proto",
}
