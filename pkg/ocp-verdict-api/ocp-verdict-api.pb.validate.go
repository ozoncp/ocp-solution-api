// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-verdict-api/ocp-verdict-api.proto

package ocp_verdict_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateVerdictV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVerdictV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSolutionId() <= 0 {
		return CreateVerdictV1RequestValidationError{
			field:  "SolutionId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateVerdictV1RequestValidationError is the validation error returned by
// CreateVerdictV1Request.Validate if the designated constraints aren't met.
type CreateVerdictV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVerdictV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVerdictV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVerdictV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVerdictV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVerdictV1RequestValidationError) ErrorName() string {
	return "CreateVerdictV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVerdictV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVerdictV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVerdictV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVerdictV1RequestValidationError{}

// Validate checks the field values on CreateVerdictV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVerdictV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVerdict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVerdictV1ResponseValidationError{
				field:  "Verdict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVerdictV1ResponseValidationError is the validation error returned by
// CreateVerdictV1Response.Validate if the designated constraints aren't met.
type CreateVerdictV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVerdictV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVerdictV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVerdictV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVerdictV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVerdictV1ResponseValidationError) ErrorName() string {
	return "CreateVerdictV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVerdictV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVerdictV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVerdictV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVerdictV1ResponseValidationError{}

// Validate checks the field values on ListVerdictsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVerdictsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListVerdictsV1RequestValidationError is the validation error returned by
// ListVerdictsV1Request.Validate if the designated constraints aren't met.
type ListVerdictsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVerdictsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVerdictsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVerdictsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVerdictsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVerdictsV1RequestValidationError) ErrorName() string {
	return "ListVerdictsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVerdictsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVerdictsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVerdictsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVerdictsV1RequestValidationError{}

// Validate checks the field values on ListVerdictsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVerdictsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVerdicts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVerdictsV1ResponseValidationError{
					field:  fmt.Sprintf("Verdicts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListVerdictsV1ResponseValidationError is the validation error returned by
// ListVerdictsV1Response.Validate if the designated constraints aren't met.
type ListVerdictsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVerdictsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVerdictsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVerdictsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVerdictsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVerdictsV1ResponseValidationError) ErrorName() string {
	return "ListVerdictsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVerdictsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVerdictsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVerdictsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVerdictsV1ResponseValidationError{}

// Validate checks the field values on UpdateVerdictV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVerdictV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSolutionId() <= 0 {
		return UpdateVerdictV1RequestValidationError{
			field:  "SolutionId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for Comment

	return nil
}

// UpdateVerdictV1RequestValidationError is the validation error returned by
// UpdateVerdictV1Request.Validate if the designated constraints aren't met.
type UpdateVerdictV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVerdictV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVerdictV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVerdictV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVerdictV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVerdictV1RequestValidationError) ErrorName() string {
	return "UpdateVerdictV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVerdictV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVerdictV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVerdictV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVerdictV1RequestValidationError{}

// Validate checks the field values on UpdateVerdictV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVerdictV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UpdateVerdictV1ResponseValidationError is the validation error returned by
// UpdateVerdictV1Response.Validate if the designated constraints aren't met.
type UpdateVerdictV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVerdictV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVerdictV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVerdictV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVerdictV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVerdictV1ResponseValidationError) ErrorName() string {
	return "UpdateVerdictV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVerdictV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVerdictV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVerdictV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVerdictV1ResponseValidationError{}

// Validate checks the field values on RemoveVerdictV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveVerdictV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSolutionId() <= 0 {
		return RemoveVerdictV1RequestValidationError{
			field:  "SolutionId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveVerdictV1RequestValidationError is the validation error returned by
// RemoveVerdictV1Request.Validate if the designated constraints aren't met.
type RemoveVerdictV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveVerdictV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveVerdictV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveVerdictV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveVerdictV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveVerdictV1RequestValidationError) ErrorName() string {
	return "RemoveVerdictV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveVerdictV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveVerdictV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveVerdictV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveVerdictV1RequestValidationError{}

// Validate checks the field values on RemoveVerdictV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveVerdictV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// RemoveVerdictV1ResponseValidationError is the validation error returned by
// RemoveVerdictV1Response.Validate if the designated constraints aren't met.
type RemoveVerdictV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveVerdictV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveVerdictV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveVerdictV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveVerdictV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveVerdictV1ResponseValidationError) ErrorName() string {
	return "RemoveVerdictV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveVerdictV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveVerdictV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveVerdictV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveVerdictV1ResponseValidationError{}

// Validate checks the field values on Verdict with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Verdict) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSolutionId() <= 0 {
		return VerdictValidationError{
			field:  "SolutionId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return VerdictValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Status

	// no validation rules for Timestamp

	// no validation rules for Comment

	return nil
}

// VerdictValidationError is the validation error returned by Verdict.Validate
// if the designated constraints aren't met.
type VerdictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerdictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerdictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerdictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerdictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerdictValidationError) ErrorName() string { return "VerdictValidationError" }

// Error satisfies the builtin error interface
func (e VerdictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerdict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerdictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerdictValidationError{}
