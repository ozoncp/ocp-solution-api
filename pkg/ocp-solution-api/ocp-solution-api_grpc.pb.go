// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_solution_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpSolutionApiClient is the client API for OcpSolutionApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpSolutionApiClient interface {
	CreateSolutionV1(ctx context.Context, in *CreateSolutionV1Request, opts ...grpc.CallOption) (*CreateSolutionV1Response, error)
	ListSolutionsV1(ctx context.Context, in *ListSolutionsV1Request, opts ...grpc.CallOption) (*ListSolutionsV1Response, error)
	DescribeSolutionV1(ctx context.Context, in *DescribeSolutionV1Request, opts ...grpc.CallOption) (*DescribeSolutionV1Response, error)
	RemoveSolutionV1(ctx context.Context, in *RemoveSolutionV1Request, opts ...grpc.CallOption) (*RemoveSolutionV1Response, error)
}

type ocpSolutionApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpSolutionApiClient(cc grpc.ClientConnInterface) OcpSolutionApiClient {
	return &ocpSolutionApiClient{cc}
}

func (c *ocpSolutionApiClient) CreateSolutionV1(ctx context.Context, in *CreateSolutionV1Request, opts ...grpc.CallOption) (*CreateSolutionV1Response, error) {
	out := new(CreateSolutionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.solution.api.OcpSolutionApi/CreateSolutionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSolutionApiClient) ListSolutionsV1(ctx context.Context, in *ListSolutionsV1Request, opts ...grpc.CallOption) (*ListSolutionsV1Response, error) {
	out := new(ListSolutionsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.solution.api.OcpSolutionApi/ListSolutionsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSolutionApiClient) DescribeSolutionV1(ctx context.Context, in *DescribeSolutionV1Request, opts ...grpc.CallOption) (*DescribeSolutionV1Response, error) {
	out := new(DescribeSolutionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.solution.api.OcpSolutionApi/DescribeSolutionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSolutionApiClient) RemoveSolutionV1(ctx context.Context, in *RemoveSolutionV1Request, opts ...grpc.CallOption) (*RemoveSolutionV1Response, error) {
	out := new(RemoveSolutionV1Response)
	err := c.cc.Invoke(ctx, "/ocp.solution.api.OcpSolutionApi/RemoveSolutionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpSolutionApiServer is the server API for OcpSolutionApi service.
// All implementations must embed UnimplementedOcpSolutionApiServer
// for forward compatibility
type OcpSolutionApiServer interface {
	CreateSolutionV1(context.Context, *CreateSolutionV1Request) (*CreateSolutionV1Response, error)
	ListSolutionsV1(context.Context, *ListSolutionsV1Request) (*ListSolutionsV1Response, error)
	DescribeSolutionV1(context.Context, *DescribeSolutionV1Request) (*DescribeSolutionV1Response, error)
	RemoveSolutionV1(context.Context, *RemoveSolutionV1Request) (*RemoveSolutionV1Response, error)
	mustEmbedUnimplementedOcpSolutionApiServer()
}

// UnimplementedOcpSolutionApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpSolutionApiServer struct {
}

func (UnimplementedOcpSolutionApiServer) CreateSolutionV1(context.Context, *CreateSolutionV1Request) (*CreateSolutionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolutionV1 not implemented")
}
func (UnimplementedOcpSolutionApiServer) ListSolutionsV1(context.Context, *ListSolutionsV1Request) (*ListSolutionsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolutionsV1 not implemented")
}
func (UnimplementedOcpSolutionApiServer) DescribeSolutionV1(context.Context, *DescribeSolutionV1Request) (*DescribeSolutionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSolutionV1 not implemented")
}
func (UnimplementedOcpSolutionApiServer) RemoveSolutionV1(context.Context, *RemoveSolutionV1Request) (*RemoveSolutionV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSolutionV1 not implemented")
}
func (UnimplementedOcpSolutionApiServer) mustEmbedUnimplementedOcpSolutionApiServer() {}

// UnsafeOcpSolutionApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpSolutionApiServer will
// result in compilation errors.
type UnsafeOcpSolutionApiServer interface {
	mustEmbedUnimplementedOcpSolutionApiServer()
}

func RegisterOcpSolutionApiServer(s grpc.ServiceRegistrar, srv OcpSolutionApiServer) {
	s.RegisterService(&OcpSolutionApi_ServiceDesc, srv)
}

func _OcpSolutionApi_CreateSolutionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSolutionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSolutionApiServer).CreateSolutionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.solution.api.OcpSolutionApi/CreateSolutionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSolutionApiServer).CreateSolutionV1(ctx, req.(*CreateSolutionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSolutionApi_ListSolutionsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolutionsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSolutionApiServer).ListSolutionsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.solution.api.OcpSolutionApi/ListSolutionsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSolutionApiServer).ListSolutionsV1(ctx, req.(*ListSolutionsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSolutionApi_DescribeSolutionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSolutionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSolutionApiServer).DescribeSolutionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.solution.api.OcpSolutionApi/DescribeSolutionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSolutionApiServer).DescribeSolutionV1(ctx, req.(*DescribeSolutionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSolutionApi_RemoveSolutionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSolutionV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSolutionApiServer).RemoveSolutionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.solution.api.OcpSolutionApi/RemoveSolutionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSolutionApiServer).RemoveSolutionV1(ctx, req.(*RemoveSolutionV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpSolutionApi_ServiceDesc is the grpc.ServiceDesc for OcpSolutionApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpSolutionApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.solution.api.OcpSolutionApi",
	HandlerType: (*OcpSolutionApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSolutionV1",
			Handler:    _OcpSolutionApi_CreateSolutionV1_Handler,
		},
		{
			MethodName: "ListSolutionsV1",
			Handler:    _OcpSolutionApi_ListSolutionsV1_Handler,
		},
		{
			MethodName: "DescribeSolutionV1",
			Handler:    _OcpSolutionApi_DescribeSolutionV1_Handler,
		},
		{
			MethodName: "RemoveSolutionV1",
			Handler:    _OcpSolutionApi_RemoveSolutionV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-solution-api/ocp-solution-api.proto",
}
