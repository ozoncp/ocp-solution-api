// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-solution-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-solution-api/internal/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddSolution mocks base method.
func (m *MockRepo) AddSolution(arg0 context.Context, arg1 models.Solution) (*models.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSolution", arg0, arg1)
	ret0, _ := ret[0].(*models.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSolution indicates an expected call of AddSolution.
func (mr *MockRepoMockRecorder) AddSolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSolution", reflect.TypeOf((*MockRepo)(nil).AddSolution), arg0, arg1)
}

// AddSolutions mocks base method.
func (m *MockRepo) AddSolutions(arg0 context.Context, arg1 []models.Solution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSolutions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSolutions indicates an expected call of AddSolutions.
func (mr *MockRepoMockRecorder) AddSolutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSolutions", reflect.TypeOf((*MockRepo)(nil).AddSolutions), arg0, arg1)
}

// ListSolutions mocks base method.
func (m *MockRepo) ListSolutions(arg0 context.Context, arg1, arg2 uint64) ([]*models.Solution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Solution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolutions indicates an expected call of ListSolutions.
func (mr *MockRepoMockRecorder) ListSolutions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutions", reflect.TypeOf((*MockRepo)(nil).ListSolutions), arg0, arg1, arg2)
}

// RemoveSolution mocks base method.
func (m *MockRepo) RemoveSolution(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSolution", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSolution indicates an expected call of RemoveSolution.
func (mr *MockRepoMockRecorder) RemoveSolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSolution", reflect.TypeOf((*MockRepo)(nil).RemoveSolution), arg0, arg1)
}

// UpdateSolution mocks base method.
func (m *MockRepo) UpdateSolution(arg0 context.Context, arg1 models.Solution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolution", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSolution indicates an expected call of UpdateSolution.
func (mr *MockRepoMockRecorder) UpdateSolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolution", reflect.TypeOf((*MockRepo)(nil).UpdateSolution), arg0, arg1)
}
